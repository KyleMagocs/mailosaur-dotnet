// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Mailosaur
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// # Introduction
    ///
    /// This is an overview of the Mailosaur API. This API a RESTful JSON
    /// interface
    /// with predictable, resource-oriented URLs. We make use of HTTP response
    /// codes to indicate
    /// API errors.
    ///
    /// We use built-in HTTP features, like HTTP authentication and HTTP verbs,
    /// which are understood
    /// by off-the-shelf HTTP clients.
    ///
    /// [Official client libraries](/docs/client-libraries/) available for most
    /// popular languages.
    ///
    /// # Authentication
    ///
    /// Authenticate your account when using the API by including your API key
    /// in the request.
    /// You can [manage your API keys](/app/account/api-access/) in the
    /// Mailosaur UI. Your API key carrys many privileges,
    /// so be sure to keep it secret! Do not share your API key in
    /// publicly-accessible areas such
    /// GitHub, client-side code, and so on.
    ///
    /// All API requests must be made over HTTPS. Calls made over plain HTTP
    /// will fail.
    /// API requests without authentication will also fail.
    ///
    /// # Errors
    ///
    /// ## HTTP status codes
    ///
    /// Mailosaur uses conventional HTTP response codes to indicate the success
    /// or failure of an
    /// API request. In general, codes in the `2xx` range indicate success,
    /// codes in the `4xx` range
    /// indicate an error that failed given the information provided (e.g., a
    /// required parameter
    /// was omitted), and codes in the `5xx` range indicate an error with
    /// Mailosaur's servers (give us a shout in the unlikely event that you see
    /// one of those).
    ///
    /// | Code | Description |
    /// |---|---|
    /// | 200 - OK | Request was successful. |
    /// | 204 - No Content | Request was successful, no response content. |
    /// | 400 - Bad Request | The request could be handled, often due to
    /// missing a required parameter. |
    /// | 401 - Unauthorized | No valid API key provided. |
    /// | 404 - Not Found | The requested resource doesn't exist. |
    /// | 5XX - Server Errors | Something went wrong at Mailosaur. (Give us a
    /// shout). |
    ///
    /// ## Error handling
    ///
    /// In of an error the server will return as much information as possible.
    /// In the case of a `401` or
    /// `404` error the status code gives as much information as you'd need.
    /// But for `400` errors
    /// Mailosaur will return a JSON object containing the structure below.
    ///
    /// Note that our client libraries convert responses to appropriate
    /// language-specific objects.
    ///
    /// | Property | Description |
    /// |---|---|
    /// | `type` | The type of error returned. Can be: api_connection_error,
    /// api_error, authentication_error, card_error, idempotency_error
    /// invalid_request_error, or rate_limit_error. |
    /// | `message` | A human-readable message providing more details about the
    /// error. |
    /// | `parameters` | A JSON object containing a key for each property name
    /// at fault, with a human-readable message per field |
    /// | `model` | The request model that we sent and failed to be processed |
    /// </summary>
    public partial class MailosaurClient : ServiceClient<MailosaurClient>, IMailosaurClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Gets the IAnalysis.
        /// </summary>
        public virtual IAnalysis Analysis { get; private set; }

        /// <summary>
        /// Gets the IFiles.
        /// </summary>
        public virtual IFiles Files { get; private set; }

        /// <summary>
        /// Gets the IMessages.
        /// </summary>
        public virtual IMessages Messages { get; private set; }

        /// <summary>
        /// Gets the IServers.
        /// </summary>
        public virtual IServers Servers { get; private set; }

        /// <summary>
        /// Initializes a new instance of the MailosaurClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected MailosaurClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the MailosaurClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected MailosaurClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the MailosaurClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected MailosaurClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the MailosaurClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected MailosaurClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the MailosaurClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        internal MailosaurClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the MailosaurClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        internal MailosaurClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the MailosaurClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        internal MailosaurClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the MailosaurClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        internal MailosaurClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Analysis = new Analysis(this);
            Files = new Files(this);
            Messages = new Messages(this);
            Servers = new Servers(this);
            BaseUri = new System.Uri("https://mailosaur.com");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}
