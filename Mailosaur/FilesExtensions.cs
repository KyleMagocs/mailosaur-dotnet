// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Mailosaur
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Files.
    /// </summary>
    public static partial class FilesExtensions
    {
            /// <summary>
            /// Download an attachment
            /// </summary>
            /// <remarks>
            /// Downloads a single attachment. Simply supply the unique identifier for the
            /// required attachment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the attachment to be downloaded.
            /// </param>
            public static Stream GetAttachment(this IFiles operations, System.Guid id)
            {
                return operations.GetAttachmentAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Download an attachment
            /// </summary>
            /// <remarks>
            /// Downloads a single attachment. Simply supply the unique identifier for the
            /// required attachment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the attachment to be downloaded.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetAttachmentAsync(this IFiles operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetAttachmentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Download EML
            /// </summary>
            /// <remarks>
            /// Downloads an EML file representing the specified email. Simply supply the
            /// unique identifier for the required email.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the email to be downloaded.
            /// </param>
            public static Stream GetEmail(this IFiles operations, System.Guid id)
            {
                return operations.GetEmailAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Download EML
            /// </summary>
            /// <remarks>
            /// Downloads an EML file representing the specified email. Simply supply the
            /// unique identifier for the required email.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the email to be downloaded.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetEmailAsync(this IFiles operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetEmailWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

    }
}
