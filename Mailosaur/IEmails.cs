// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Mailosaur
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Emails operations.
    /// </summary>
    public partial interface IEmails
    {
        /// <summary>
        /// Retrieve an email
        /// </summary>
        /// <remarks>
        /// Retrieves the detail for a single email. Simply supply the unique
        /// identifier for the required email.
        /// </remarks>
        /// <param name='id'>
        /// The identifier of the email to be retrieved.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="MailosaurException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<Email>> GetWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an email
        /// </summary>
        /// <remarks>
        /// Permanently deletes an email. This operation cannot be undone. Also
        /// deletes any attachments related to the email.
        /// </remarks>
        /// <param name='id'>
        /// The identifier of the email to be deleted.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="MailosaurException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> DeleteWithHttpMessagesAsync(System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all emails
        /// </summary>
        /// <remarks>
        /// Returns a list of your emails. The emails are returned sorted by
        /// received date, with the most recently-received emails appearing
        /// first.
        /// </remarks>
        /// <param name='server'>
        /// The identifier of the server hosting the emails.
        /// </param>
        /// <param name='pagenumber'>
        /// Used in conjunction with `itemsperpage` to support pagination.
        /// </param>
        /// <param name='itemsperpage'>
        /// A limit on the number of results to be returned. Can be set between
        /// 1 and 1000 items, the default is 50.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="MailosaurException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<Email>>> ListWithHttpMessagesAsync(string server, int? pagenumber = default(int?), int? itemsperpage = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete all emails
        /// </summary>
        /// <remarks>
        /// Permanently deletes all emails held by the specified server. This
        /// operation cannot be undone. Also deletes any attachments related to
        /// each email.
        /// </remarks>
        /// <param name='server'>
        /// The identifier of the server to be emptied.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="MailosaurException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteAllWithHttpMessagesAsync(string server, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search for emails
        /// </summary>
        /// <remarks>
        /// Returns a list of emails matching the specified search criteria.
        /// The emails are returned sorted by received date, with the most
        /// recently-received emails appearing first.
        /// </remarks>
        /// <param name='server'>
        /// The identifier of the server hosting the emails.
        /// </param>
        /// <param name='criteria'>
        /// The search criteria to match results against.
        /// </param>
        /// <param name='pagenumber'>
        /// Used in conjunction with `itemsperpage` to support pagination.
        /// </param>
        /// <param name='itemsperpage'>
        /// A limit on the number of results to be returned. Can be set between
        /// 1 and 1000 items, the default is 50.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="MailosaurException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<Email>>> SearchWithHttpMessagesAsync(string server, SearchCriteria criteria, int? pagenumber = default(int?), int? itemsperpage = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Wait for a specific email
        /// </summary>
        /// <remarks>
        /// Returns as soon as an email matching the specified search criteria
        /// is found.
        /// </remarks>
        /// <param name='server'>
        /// The identifier of the server hosting the email.
        /// </param>
        /// <param name='criteria'>
        /// The search criteria to use in order to find a match.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="MailosaurException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Email>> WaitForWithHttpMessagesAsync(string server, SearchCriteria criteria, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
