// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Mailosaur
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Servers.
    /// </summary>
    public static partial class ServersExtensions
    {
            /// <summary>
            /// List all servers
            /// </summary>
            /// <remarks>
            /// Returns a list of your virtual SMTP servers. Servers are returned sorted in
            /// alphabetical order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ServerListResult List(this IServers operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all servers
            /// </summary>
            /// <remarks>
            /// Returns a list of your virtual SMTP servers. Servers are returned sorted in
            /// alphabetical order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerListResult> ListAsync(this IServers operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a server
            /// </summary>
            /// <remarks>
            /// Creates a new virtual SMTP server and returns it.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverCreateOptions'>
            /// </param>
            public static Server Create(this IServers operations, ServerCreateOptions serverCreateOptions)
            {
                return operations.CreateAsync(serverCreateOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a server
            /// </summary>
            /// <remarks>
            /// Creates a new virtual SMTP server and returns it.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverCreateOptions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Server> CreateAsync(this IServers operations, ServerCreateOptions serverCreateOptions, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(serverCreateOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a server
            /// </summary>
            /// <remarks>
            /// Retrieves the detail for a single server. Simply supply the unique
            /// identifier for the required server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the server to be retrieved.
            /// </param>
            public static Server Get(this IServers operations, string id)
            {
                return operations.GetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a server
            /// </summary>
            /// <remarks>
            /// Retrieves the detail for a single server. Simply supply the unique
            /// identifier for the required server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the server to be retrieved.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Server> GetAsync(this IServers operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a server
            /// </summary>
            /// <remarks>
            /// Updats a single server and returns it.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the server to be updated.
            /// </param>
            /// <param name='server'>
            /// </param>
            public static Server Update(this IServers operations, string id, Server server)
            {
                return operations.UpdateAsync(id, server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a server
            /// </summary>
            /// <remarks>
            /// Updats a single server and returns it.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the server to be updated.
            /// </param>
            /// <param name='server'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Server> UpdateAsync(this IServers operations, string id, Server server, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(id, server, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a server
            /// </summary>
            /// <remarks>
            /// Permanently deletes a server. This operation cannot be undone. Also deletes
            /// all messages and associated attachments within the server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the server to be deleted.
            /// </param>
            public static void Delete(this IServers operations, string id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a server
            /// </summary>
            /// <remarks>
            /// Permanently deletes a server. This operation cannot be undone. Also deletes
            /// all messages and associated attachments within the server.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the server to be deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IServers operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
