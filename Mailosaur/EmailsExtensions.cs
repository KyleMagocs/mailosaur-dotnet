// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Mailosaur
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Emails.
    /// </summary>
    public static partial class EmailsExtensions
    {
            /// <summary>
            /// Retrieve an email
            /// </summary>
            /// <remarks>
            /// Retrieves the detail for a single email. Simply supply the unique
            /// identifier for the required email.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the email to be retrieved.
            /// </param>
            public static Email Get(this IEmails operations, System.Guid id)
            {
                return operations.GetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve an email
            /// </summary>
            /// <remarks>
            /// Retrieves the detail for a single email. Simply supply the unique
            /// identifier for the required email.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the email to be retrieved.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Email> GetAsync(this IEmails operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an email
            /// </summary>
            /// <remarks>
            /// Permanently deletes an email. This operation cannot be undone. Also deletes
            /// any attachments related to the email.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the email to be deleted.
            /// </param>
            public static void Delete(this IEmails operations, System.Guid id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an email
            /// </summary>
            /// <remarks>
            /// Permanently deletes an email. This operation cannot be undone. Also deletes
            /// any attachments related to the email.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the email to be deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IEmails operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List all emails
            /// </summary>
            /// <remarks>
            /// Returns a list of your emails. The emails are returned sorted by received
            /// date, with the most recently-received emails appearing first.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server hosting the emails.
            /// </param>
            /// <param name='pagenumber'>
            /// Used in conjunction with `itemsperpage` to support pagination.
            /// </param>
            /// <param name='itemsperpage'>
            /// A limit on the number of results to be returned. Can be set between 1 and
            /// 1000 items, the default is 50.
            /// </param>
            public static IList<Email> List(this IEmails operations, string server, int? pagenumber = default(int?), int? itemsperpage = default(int?))
            {
                return operations.ListAsync(server, pagenumber, itemsperpage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all emails
            /// </summary>
            /// <remarks>
            /// Returns a list of your emails. The emails are returned sorted by received
            /// date, with the most recently-received emails appearing first.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server hosting the emails.
            /// </param>
            /// <param name='pagenumber'>
            /// Used in conjunction with `itemsperpage` to support pagination.
            /// </param>
            /// <param name='itemsperpage'>
            /// A limit on the number of results to be returned. Can be set between 1 and
            /// 1000 items, the default is 50.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Email>> ListAsync(this IEmails operations, string server, int? pagenumber = default(int?), int? itemsperpage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(server, pagenumber, itemsperpage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete all emails
            /// </summary>
            /// <remarks>
            /// Permanently deletes all emails held by the specified server. This operation
            /// cannot be undone. Also deletes any attachments related to each email.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server to be emptied.
            /// </param>
            public static void DeleteAll(this IEmails operations, string server)
            {
                operations.DeleteAllAsync(server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete all emails
            /// </summary>
            /// <remarks>
            /// Permanently deletes all emails held by the specified server. This operation
            /// cannot be undone. Also deletes any attachments related to each email.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server to be emptied.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAllAsync(this IEmails operations, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAllWithHttpMessagesAsync(server, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Search for emails
            /// </summary>
            /// <remarks>
            /// Returns a list of emails matching the specified search criteria. The emails
            /// are returned sorted by received date, with the most recently-received
            /// emails appearing first.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server hosting the emails.
            /// </param>
            /// <param name='criteria'>
            /// The search criteria to match results against.
            /// </param>
            /// <param name='pagenumber'>
            /// Used in conjunction with `itemsperpage` to support pagination.
            /// </param>
            /// <param name='itemsperpage'>
            /// A limit on the number of results to be returned. Can be set between 1 and
            /// 1000 items, the default is 50.
            /// </param>
            public static IList<Email> Search(this IEmails operations, string server, SearchCriteria criteria, int? pagenumber = default(int?), int? itemsperpage = default(int?))
            {
                return operations.SearchAsync(server, criteria, pagenumber, itemsperpage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for emails
            /// </summary>
            /// <remarks>
            /// Returns a list of emails matching the specified search criteria. The emails
            /// are returned sorted by received date, with the most recently-received
            /// emails appearing first.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server hosting the emails.
            /// </param>
            /// <param name='criteria'>
            /// The search criteria to match results against.
            /// </param>
            /// <param name='pagenumber'>
            /// Used in conjunction with `itemsperpage` to support pagination.
            /// </param>
            /// <param name='itemsperpage'>
            /// A limit on the number of results to be returned. Can be set between 1 and
            /// 1000 items, the default is 50.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Email>> SearchAsync(this IEmails operations, string server, SearchCriteria criteria, int? pagenumber = default(int?), int? itemsperpage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchWithHttpMessagesAsync(server, criteria, pagenumber, itemsperpage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Wait for a specific email
            /// </summary>
            /// <remarks>
            /// Returns as soon as an email matching the specified search criteria is
            /// found.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server hosting the email.
            /// </param>
            /// <param name='criteria'>
            /// The search criteria to use in order to find a match.
            /// </param>
            public static Email WaitFor(this IEmails operations, string server, SearchCriteria criteria)
            {
                return operations.WaitForAsync(server, criteria).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Wait for a specific email
            /// </summary>
            /// <remarks>
            /// Returns as soon as an email matching the specified search criteria is
            /// found.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server hosting the email.
            /// </param>
            /// <param name='criteria'>
            /// The search criteria to use in order to find a match.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Email> WaitForAsync(this IEmails operations, string server, SearchCriteria criteria, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WaitForWithHttpMessagesAsync(server, criteria, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
